//E.Точка и треугольник
//Ограничение времени	1 секунда
//Ограничение памяти	64Mb
//Ввод	стандартный ввод или input.txt
//Вывод	стандартный вывод или output.txt
//На координатной плоскости расположены равнобедренный прямоугольный треугольник ABC 
//с длиной катета d и точка X.Катеты треугольника лежат на осях координат, а вершины 
//расположены в точках : A(0, 0), B(d, 0), C(0, d).
//
//Напишите программу, которая определяет взаимное расположение точки X и треугольника.
//Если точка X расположена внутри или на сторонах треугольника, выведите 0. Если же точка 
//находится вне треугольника, выведите номер ближайшей к ней вершины.
//
//Формат ввода
//Сначала вводится натуральное число d(не превосходящее 1000), а затем координаты точки X 
//– два целых числа из диапазона от ­–1000 до 1000.
//
//Формат вывода
//Если точка лежит внутри, на стороне треугольника или совпадает с одной из вершин, то 
//выведите число 0. Если точка лежит вне треугольника, то выведите номер вершины 
//треугольника, к которой она расположена ближе всего(1 – к вершине A, 2 – к B, 3 – к C).
//Если точка расположена на одинаковом расстоянии от двух вершин, выведите ту вершину, 
//номер которой меньше.
//
//Пример 1
//Ввод	    Вывод
//5       0
//1 1
//
//Пример 2
//Ввод	    Вывод
//3           1
//- 1 - 1
//
//Пример 3
//Ввод	    Вывод
//4           2
//4 4
//
//Пример 4
//Ввод	    Вывод
//4           0
//2 2
//
//Примечания
//Комментарии к примерам тестов
//
//1. Точка лежит внутри треугольника.
//
//2. Точка лежит вне треугольника и ближе всего к ней вершина A
//
//3. Точка лежит на равном расстоянии от вершин B и C, в этом случае нужно вывести ту 
//вершину, у которой номер меньше, т.е.выведено должно быть число 2
//
//4. Точка лежит на стороне треугольника.

#include<iostream>
#include<map>
#include<algorithm>
#include <math.h>
using namespace std;


int vect_lenght(const double& x,const double& y,const double& d) {
    double lenght = 0;
    map<double,int> v;

    //формула нахождения расстояния до точки
    // lenght=sqrt( (x(X)-x(A))^2 + (y(X)-y(A))^2 )
    //найдем расстояние до точки А
    lenght = x * x + y * y;
    lenght = sqrt(lenght);
    v[1] =lenght;

    //найдем расстояние до точки B
    lenght = (x - d) * (x - d) + y * y;
    lenght = sqrt(lenght);
    v[2] = lenght;

    //найдем расстояние до точки C
    lenght = x * x + (y-d) * (y-d);
    lenght = sqrt(lenght);
    v[3] = lenght;

    //определяем минимальное расстояние
    int result = min(v[1], v[2]);
    if (result == v[1]) {
        result = min(v[1], v[3]);
    }
    else {
        result = min(v[2], v[3]);
    }

    for (auto x : v) {
        if (x.second == result) {
            return x.first;
            return 0;
        }
    }
}


int main() {
    double d, x, y;
    //ввод данных
    
    cin >> d >> x >> y;

    //проврка в какой октанте мы находимся
    if (x >= 0 && y >= 0) {
        //проверка принадлежности сторонам
        if (y <= -x + d) {
            cout << 0;
            return 0;
        }
    }
    //вывод самого ближайшей вершины
    cout << vect_lenght(x, y, d);

    return 0;
}